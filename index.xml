<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rafael Moreira Fonseca</title><link>https://rafaelmfonseca.github.io/</link><description>Recent content on Rafael Moreira Fonseca</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 25 May 2022 12:00:00 +0000</lastBuildDate><atom:link href="https://rafaelmfonseca.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Você conhece a técnica de geração procedural em jogos digitais?</title><link>https://rafaelmfonseca.github.io/posts/geracao-procedural/</link><pubDate>Wed, 25 May 2022 12:00:00 +0000</pubDate><guid>https://rafaelmfonseca.github.io/posts/geracao-procedural/</guid><description>A geração procedural é um assunto que vem se popularizando nos últimos anos entre os desenvolvedores de jogos indies. A utilização dessa técnica para geração de leveis e terrenos de jogos é adotado por programadores que não desejam limitar o conteúdo de seus games, abrindo portas para criar uma quantidade infinita de recursos. Hoje, vamos discurtir as principais vantagens e desvantagens de usar esse tipo de técnica, e saber quando a utilização desses algorítmos pode se tornar favorável para o seu projeto.</description></item><item><title>Design Pattern: Expor versão não genérica de interfaces genéricas</title><link>https://rafaelmfonseca.github.io/posts/design-pattern-expor-versao-nao-generica-interfaces-generica/</link><pubDate>Fri, 24 Dec 2021 01:52:00 +0000</pubDate><guid>https://rafaelmfonseca.github.io/posts/design-pattern-expor-versao-nao-generica-interfaces-generica/</guid><description>Se você está familiarizado com o ambiente .NET, com certeza já ouviu falar da interface IEnumerable&amp;lt;T&amp;gt; utilizada para iterar listas em instruções foreach, porém antes do namespace System.Collections.Generic ser criado, existia apenas o IEnumerable(não genérico) do namespace System.Collections.
Hoje, IEnumerable&amp;lt;T&amp;gt; estende de IEnumerable:
namespace System.Collections { public interface IEnumerable { IEnumerator GetEnumerator(); } } namespace System.Collections.Generic { public interface IEnumerable&amp;lt;out T&amp;gt; : IEnumerable { new IEnumerator&amp;lt;T&amp;gt; GetEnumerator(); } } Veja as vantagens de implementar esse padrão: Essa herança faz sentido para não quebrar códigos legado e permite mais generalidade, fornecendo uma implementação não genérica para os consumidores.</description></item><item><title>Análise Open Source - Parte 2</title><link>https://rafaelmfonseca.github.io/posts/analise-open-source-parte-2/</link><pubDate>Thu, 23 Dec 2021 22:08:00 +0000</pubDate><guid>https://rafaelmfonseca.github.io/posts/analise-open-source-parte-2/</guid><description>Hoje é dia de estudar o projeto FluentValidation/FluentValidation, uma biblioteca simples se comparada com o EFCore, mas acredito que a vamos conseguir extrair alguns padrões interessantes com seu código.
AbstractValidator.cs AbstractValidator é a classe abstrata principal que declara as validações de um determinado model/entity.
src/FluentValidation/AbstractValidator.cs
#region License // Copyright (c) .NET Foundation and contributors. // ... #endregion namespace FluentValidation { using System; using System.Collections.Generic; /** ... **/ public abstract class AbstractValidator&amp;lt;T&amp;gt; : IValidator&amp;lt;T&amp;gt;, IEnumerable&amp;lt;IValidationRule&amp;gt; { /** .</description></item><item><title>Análise Open Source - Parte 1</title><link>https://rafaelmfonseca.github.io/posts/analise-open-source-parte-1/</link><pubDate>Tue, 21 Dec 2021 18:40:00 +0000</pubDate><guid>https://rafaelmfonseca.github.io/posts/analise-open-source-parte-1/</guid><description>No últimos dias estou tentando aprimorar minhas habilidades de engenharia de software para construir aplicações robustas, de fácil manutenção, baixo acoplamento e alta coesão.
Pra isso, decidi analisar bibliotecas famosas para entender os pontos positivos e aplicá-las em meus softwares. Eu sei que cada projeto tem sua particularidade, mas análise de código também é algo importante para qualquer programador.
Hoje vamos estudar o framework Entity Core, um ORM bem famoso no ambiente .</description></item><item><title>Criando um website com Hugo no GitHub Pages e GitHub Actions.</title><link>https://rafaelmfonseca.github.io/posts/criando-website-hugo-github-pages-github-actions/</link><pubDate>Mon, 20 Dec 2021 21:30:50 -0300</pubDate><guid>https://rafaelmfonseca.github.io/posts/criando-website-hugo-github-pages-github-actions/</guid><description>Hoje decidi criar um blog, mais uma de minhas loucuras (quem diria?).
Eu resolvo diferentes problemas relacionados à programação no meu dia-a-dia, então decidi criar este blog para expor as dificuldades que tive para chegar em um resultado positivo para esses obstáculos.
Gostaria de mencionar que escrever nunca foi meu forte, eu passo o meu dia apenas digitando palavras-chaves (ou quem sabe um JSDoc?), mas vou tentar escrever os posts de uma maneira fácil para que todos entendam.</description></item></channel></rss>